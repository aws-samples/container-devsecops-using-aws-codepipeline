AWSTemplateFormatVersion: 2010-09-09

Description: Deploy a sample Apache Website on ECS Fargate

Parameters:

  VpcId:

    Type: 'AWS::EC2::VPC::Id'

    Description: VPC ID in which resources will be deployed.

  PublicSubnets:

    Type: 'List<AWS::EC2::Subnet::Id>'

    Description: Public Subnet IDs.

  PrivateSubnets:

    Type: 'List<AWS::EC2::Subnet::Id>'

    Description: Private Subnet IDs.

  ECSClusterName:

    Type: String

    Description: ECS Cluster to deploy the Containers.

    Default: apache-demo-cluster

  ECRRepositoryUri:

    Type: String

    Description: >-

      ECR Repository URI without the tag. E.g.

      <aws_account_id>.dkr.ecr.<region>.amazonaws.com/mywebsite

Resources:

  WebsiteALBSecurityGroup:

    Type: 'AWS::EC2::SecurityGroup'

    Properties:

      VpcId: !Ref VpcId

      GroupDescription: Apache Website ALB Security Group

      SecurityGroupIngress:

        - IpProtocol: tcp

          FromPort: 80

          ToPort: 80

          CidrIp: 0.0.0.0/0

  WebsiteContainerSecurityGroup:

    Type: 'AWS::EC2::SecurityGroup'

    Properties:

      VpcId: !Ref VpcId

      GroupDescription: apache Website Container Security Group

      SecurityGroupIngress:

        - IpProtocol: tcp

          FromPort: 80

          ToPort: 80

          SourceSecurityGroupId:

            'Fn::GetAtt':

              - WebsiteALBSecurityGroup

              - GroupId

  WebsiteALB:

    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'

    Properties:

      Scheme: internet-facing

      SecurityGroups:

        - !Ref WebsiteALBSecurityGroup

      Subnets: !Ref PublicSubnets

      Type: application

  WebsiteALBTargetGroup:

    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'

    Properties:

      Protocol: HTTP

      Port: 80

      TargetType: ip

      VpcId: !Ref VpcId

      HealthCheckProtocol: HTTP

      HealthCheckPort: 80

      HealthCheckPath: /

      HealthyThresholdCount: 5

      UnhealthyThresholdCount: 2

      HealthCheckTimeoutSeconds: 5

      HealthCheckIntervalSeconds: 30

      Matcher:

        HttpCode: '200'

  WebsiteALBListener:

    Type: 'AWS::ElasticLoadBalancingV2::Listener'

    Properties:

      DefaultActions:

        - Type: forward

          TargetGroupArn: !Ref WebsiteALBTargetGroup

      LoadBalancerArn: !Ref WebsiteALB

      Port: 80

      Protocol: HTTP

  WebsiteContainerCloudWatchLogGroup:

    Type: 'AWS::Logs::LogGroup'

  WebsiteEcsTaskExecutionRole:

    Type: 'AWS::IAM::Role'

    Properties:

      AssumeRolePolicyDocument:

        Version: 2012-10-17

        Statement:

          - Effect: Allow

            Action: 'sts:AssumeRole'

            Principal:

              Service: ecs-tasks.amazonaws.com

  WebsiteEcsTaskExecutionRolePolicy:

    Type: 'AWS::IAM::Policy'

    Properties:

      PolicyName: fargate-execution

      Roles:

        - Ref: WebsiteEcsTaskExecutionRole

      PolicyDocument:

        Version: 2012-10-17

        Statement:

          - Effect: Allow

            Action:

              - 'ecr:GetAuthorizationToken'

              - 'ecr:BatchGetImage'

              - 'ecr:GetDownloadUrlForLayer'

              - 'ecr:BatchCheckLayerAvailability'

              - 'logs:CreateLogStream'

              - 'logs:PutLogEvents'

            Resource: '*'

  WebsiteEcsTaskRole:

    Type: 'AWS::IAM::Role'

    Properties:

      AssumeRolePolicyDocument:

        Version: 2012-10-17

        Statement:

          - Effect: Allow

            Action: 'sts:AssumeRole'

            Principal:

              Service: ecs-tasks.amazonaws.com

  WebsiteTaskDefinition:

    Type: 'AWS::ECS::TaskDefinition'

    Properties:

      Family: sample-apache-website

      Cpu: '512'

      Memory: 1GB

      NetworkMode: awsvpc

      RequiresCompatibilities:

        - FARGATE

      ExecutionRoleArn: !Ref WebsiteEcsTaskExecutionRole

      TaskRoleArn: !Ref WebsiteEcsTaskRole

      ContainerDefinitions:

        - Name: MyWebsite

          Image: !Ref ECRRepositoryUri

          Essential: 'true'

          PortMappings:

            - ContainerPort: 80

              Protocol: tcp

          LogConfiguration:

            LogDriver: awslogs

            Options:

              awslogs-group: !Ref WebsiteContainerCloudWatchLogGroup

              awslogs-region: !Ref 'AWS::Region'

              awslogs-stream-prefix: MyWebsite

  WebsiteService:

    Type: 'AWS::ECS::Service'

    DependsOn: WebsiteALBListener

    Properties:

      Cluster: !Ref ECSClusterName

      LaunchType: FARGATE

      DesiredCount: 1

      TaskDefinition: !Ref WebsiteTaskDefinition

      LoadBalancers:

        - ContainerName: MyWebsite

          ContainerPort: 80

          TargetGroupArn: !Ref WebsiteALBTargetGroup

      NetworkConfiguration:

        AwsvpcConfiguration:

          AssignPublicIp: DISABLED

          SecurityGroups:

            - !Ref WebsiteContainerSecurityGroup

          Subnets: !Ref PrivateSubnets

Outputs:

  WebsiteAlbUrl:

    Description: URL of the Website ALB

    Value:

      'Fn::Join':

        - ''

        - - 'http://'

          - !GetAtt 

            - WebsiteALB

            - DNSName

  WebsiteECSServiceName:

    Description: Website ECS Service Name

    Value: !GetAtt 

      - WebsiteService

      - Name